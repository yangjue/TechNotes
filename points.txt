Pointers
A. shared_ptr    , is not threadSafe    [ 考虑使用场景 ：1.继承 2.循环引用 （weak_ptr） 3.数组]
   template<typename T>
    class shared_ptr {
    public ：
        shared_ptr(T* ptr) : mptr(ptr)，_pcount(new int(1) {   } 
        sharedPtr(const SharedPtr&s)  :_ptr(s._ptr)  , _pcount(s._pcount)  // take care _ptr can be a base class of s.ptr
        {
               *(_pcount)++;
        }
        T*  mptr;
        T*  operator->()  { return mptr; } 
        T*  operator*（）{ return *mptr;}
         int*  pcount；
    } 
   //***********************
1. 无需虚析构；假设 Bar 是 Foo 的基类，但是 Bar 和 Foo 都没有虚析构。

shared_ptr<Foo> sp1(new Foo); // ref_count.ptr 的类型是 Foo*

shared_ptr<Bar> sp2 = sp1; // 可以赋值，自动向上转型（up-cast）

sp1.reset(); // 这时 Foo 对象的引用计数降为 1

此后 sp2 仍然能安全地管理 Foo 对象的生命期，并安全完整地释放 Foo，因为其 ref_count 记住了 Foo 的实际类型。

2. shared_ptr<void> 可以指向并安全地管理（析构或防止析构）任何对象；muduo::net::Channel class 的 tie() 函数就使用了这一特性，防止对象过早析构，见书 7.15.3 节。

shared_ptr<Foo> sp1(new Foo); // ref_count.ptr 的类型是 Foo*

shared_ptr<void> sp2 = sp1; // 可以赋值，Foo* 向 void* 自动转型

sp1.reset(); // 这时 Foo 对象的引用计数降为 1

此后 sp2 仍然能安全地管理 Foo 对象的生命期，并安全完整地释放 Foo，不会出现 delete void* 的情况，因为 delete 的是 ref_count.ptr，不是 sp2.ptr。

3. 多继承。假设 Bar 是 Foo 的多个基类之一，那么：

shared_ptr<Foo> sp1(new Foo);

shared_ptr<Bar> sp2 = sp1; // 这时 sp1.ptr 和 sp2.ptr 可能指向不同的地址，因为 Bar subobject 在 Foo object 中的 offset 可能不为0。

sp1.reset(); // 此时 Foo 对象的引用计数降为 1

但是 sp2 仍然能安全地管理 Foo 对象的生命期，并安全完整地释放 Foo，因为 delete 的不是 Bar*，而是原来的 Foo*。换句话说，sp2.ptr 和 ref_count.ptr 可能具有不同的值（当然它们的类型也不同）。
————————————————
版权声明：本文为CSDN博主「陈硕」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/Solstice/article/details/8547547
// **********************
   std::shared_ptr<Person> p1(new Person(1));// Person(1)的引用计数为1

    std::shared_ptr<Person> p2 = std::make_shared<Person>(2);

    p1.reset(new Person(3));// 首先生成新对象，然后引用计数减1，引用计数为0，故析构Person(1)
                            // 最后将新对象的指针交给智能指针

    std::shared_ptr<Person> p3 = p1;//现在p1和p3同时指向Person(3)，Person(3)的引用计数为2

    p1.reset();//Person(3)的引用计数为1
    p3.reset();//Person(3)的引用计数为0，析构Person(3)

    std::shared_ptr<int> p4 =new int(1) ; // error
    // 用原始指针初始化多个shared_ptr 会造成二次销毁
    int *p5 = new int;
    std::shared_ptr<int> p6(p5);
    std::shared_ptr<int> p7(p5);// logic error
    // 循环引用时一个用shared_ptr<Astruct> 另一个用 weak_ptr<Bstruct> 

1.不具有普通指针的行为，没有重载operator*和->。
2.它的最大作用在于协助shared_ptr工作，像旁观者那样观测资源的使用情况。
3.weak_ptr可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权。
4.weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加

weak_ptr使用特点
1.使用weak_ptr的成员函数use_count()可以观测资源的引用计数，
另一个成员函数expired()的功能等价于use_count()==0,
但更快，表示被观测的资源(也就是shared_ptr的管理的资源)已经不复存在。
2.weak_ptr可以使用一个非常重要的成员函数lock()从被观测的shared_ptr获得一个可用的shared_ptr对象， 
从而操作资源。
3.当expired()==true的时候，lock()函数将返回一个存储空指针的shared_ptr

#include <memory>
#include <iostream>
 
int main()
{
   std::weak_ptr<int> w_ptr;
 
   {
      auto ptr = std::make_shared<int>(10);
      w_ptr = ptr;
      // 来查看shared_ptr的引用计数
      std::cout << "w_ptr.use_count() inside scope: " << w_ptr.use_count() << '\n';
      // 通过lock()来获取对应的shared_ptr
      auto obj = w_ptr.lock();
      std::cout <<  *obj <<std::endl;
      // expired()来判断对应的object有没有被删除
      std::cout << "w_ptr.expired() out of scope: " << std::boolalpha << w_ptr.expired() << '\n';
   
   }// 出了}之后，shared_ptr被释放，引用计数被置为0.
 
   std::cout << "w_ptr.use_count() out of scope: " << w_ptr.use_count() << '\n';
   std::cout << "w_ptr.expired() out of scope: " << std::boolalpha << w_ptr.expired() << '\n';
}
输出：
w_ptr.use_count() inside scope: 1
10
w_ptr.expired() out of scope: false
w_ptr.use_count() out of scope: 0
w_ptr.expired() out of scope: true
    

B . scoped_ptr和auto_ptr的根本区别在于所有权。auto_ptr特意被设计为指针的所有权是可以被转移的，
可以在函数之间传递，同一时刻只能有一个auto_ptr管理指针。而scoped_ptr把拷贝构造函数和赋值函数
都声明为私有的，拒绝了指针所有权的转让，只有scoped_ptr自己能够管理指针，其他任何人都无权访问
被管理的指针，从而保证了指针的绝对安全。 

auto_ptr<int> ap(new int(10)); //一个int自动指针
scoped_ptr<int>sp (ap);        //从auto_ptr获得原始指针
assert(ap.get() == 0);         //原auto_ptr不再拥有指针

ap.rest(new int(20));          //auto_ptr拥有新的指针
cout <<*ap<<","<<*sp<<endl;    

auto_ptr<int>ap2;
ap2 = ap;                      //ap2从ap获得原始指针，所有权转移
assert(ap.get() == 0);         //ap不再拥有原始指针
scoped_ptr<int>sp2;            //另一个scoped_ptr
sp2 = sp;                      //赋值操作，无法同过编译！
---------- update -----------
weak_ptr 用于替换auto_ptr . 当weak_ptr 指向shared_ptr后不会影响 share_ptr 所管理的内存的生命周期,doesn't support copy construct 。 weak_ptr 可以解决循环引用的问题 当出现两个share_ptr 相互引用的时候，将
其中一个改作weak_ptr. ( father node points to child node , child node also need to pointer to its father ) 
class GFG {

public:
    float x, y;

    // Parameterized Constructor
    GFG(float x, float y)
        : x(x), y(y)
    {
        cout<<"construct : x: "<<x<<"  y: "<<y<<endl;
    }
    // Copy Constructor
    GFG(const GFG& GFG)
        : x(GFG.x), y(GFG.y)
    {
        cout << "Copied" << endl;
    }
    ~GFG()
    {
        cout<<"destructor "<<endl;
    }
    void vals() {
        cout<<"vals x : "<<x<<" y: "<<y<<endl; return ;
    }
};

    weak_ptr<vector<double>> wptr ;
    weak_ptr<GFG> wptr2  ;
    {
        auto sh_vec = make_shared<vector<double>>() ;
        wptr = sh_vec;
        auto x = make_shared<GFG>(222,333);
        wptr2 = x ;
        cout<<x.use_count()<<endl;
        vector<double> *vec_point = sh_vec.get() ;
        cout<<sh_vec.use_count()<<endl;
        (*vec_point).push_back(12.3);
        (*vec_point).push_back(1.3);
        (*vec_point).push_back(11.33);
        auto y = sh_vec ;
        cout<<sh_vec.use_count()<<endl;

        (*vec_point).push_back(99.8);
        (*vec_point).push_back(9.8);

        for ( auto x : *vec_point) {
            cout<<" element : "<<x<<endl;
        }

    }
    cout<<"leave the shared_ptr block "<<endl;

    {
        cout<<" test unique_ptr "<<endl;
        unique_ptr<int> pInt(new int(5));
        cout << *pInt;

        unique_ptr<int> pInt2 = std::move(pInt);    // 转移所有权
        //cout << *pInt << endl; // 出错，pInt为空
        cout << *pInt2 << endl;
        unique_ptr<int> pInt3(std::move(pInt2));
        cout<<"checking contruct "<<endl;
        vector<unique_ptr<GFG>> unPtr_vec ;

        unique_ptr<GFG> u = std::make_unique<GFG> (9,10) ; // c++17
        unique_ptr<GFG>& ref  = u ;
        ref->vals();
        cout<<"add "<<endl;
        unPtr_vec.push_back(std::move(u));
        //unPtr_vec.push_back(u);  doesn't support copy construct
        unPtr_vec.emplace_back(std::move(std::make_unique<GFG>(9,8.8))) ;
        unPtr_vec.push_back(std::make_unique<GFG>(9.8,3.4)) ;
        for ( auto &e : unPtr_vec) {
            e->vals();
        }

    }

     ------------------ end -------------------
 C. Archive :
   MakeFile --> BOOST_LIBS = -L$(BOOST)/lib -lboost_thread-mt -lboost_filesystem -lboost_regex -lboost_serialization
   class ArRes{
      public ：
         ArRes(Res *r) : node1name(r->node1name()), node2name(r->node2name()),r_val(r->val(),cur(r->cur()),
                         em_ratio(r->em_ratio()) {
                         }
         std::string node1name , node2name ;
         float r_val;
         float em_ratio;
   }
   namespace boost{
      namespace serialization {
         template<class Archive>
         void serialize(Archive &ar, ArRes &res, const unsigned int version ) {
            ar & res.node1name;
            ar & res.node2name;
            ar & res.cur;
         }
      }
   }
   -----------------------------------------
   // write 
   ofstream worst(file_name,ios::binary) ;
   if (!worst.is_open()) {
      cout<<"Can't open it "<<endl;
   }
   worst.setf(io::fixed);
   worst<<std::setprecision(6);
   boost::archive::binary_oarchive oa(worst);
   for ( auto &res : resList ） {
      ArRes arRes(res) ;  // write to file 
      oa<<arRes ;
    }
    ----------------
    // read 
    ifstream worst(file,ios::binary);
    boost::archive::binary_iarchive ia(worst);
    while (1) {
        try {
           ArRes arRes;
           ia>>arRes;
           worstList.push_back(arRes) ; 
        } catch (exception &e） {
             return true;   // return at the end of file
        }
    }


D. output file format
   ofstream worst(out_name);
   if (worst.is_open()) {
       return false ;
   }
   worst.setf(ios::fixed) ;
   worst<<std::setprecision(2)<<ratio<<space；
   worst<<std::setprecision(3)<<std::right<<setw(12)<<x<<","<<space<<std::left<<setw(12)<<y<<space;
   worst<<std::right<<setw(12)<<x<<","<<std::left<<setw(12)<<y<<space;
   worst<<std::left<<setw(10)<<layerName<<space;

   //  output looks  like : 
   //#EmRatio (AVG)  #NODE1_POSITION       #NODE2_POSITION  #LAYER    #NET
   // 6.32            830.000,182.123      830.000,182.123    M2      VDD
   
   
 E.  how to use json file 
   x.json  
   {
   "ID":120.98
   "School" : [
       { "Name":"NanKai",
         "Area": 9.9,
         "Building": 300,
         "Age":17
        },
        { "Name":"QingHua",
          "Area": 10,
          "Building":310,
          "Age":18
        },
        { "Name":"beijing",
          "Area": 1.9,
          "Building":23,
          "Age":20
       }
   ]
   }
   // code :
   namespace pt = boost::roperty_tree ;
   pt::ptree root ;
   try {
      status = 0 ; 
      pt::read_json(tech_file,root);
      float Id = root.get<float>("ID");
      for ( pt::ptree::value_type &sch : root.get_child("School") ) {
         string name = sch.second.get<string>("Name");
         int age = sch.second.get<int>("Age");
         double area = sch.second.get<int>("Area");
         int building = sch.second.get<int>(Building");
      }
   } catch ( exception &e ) {
      cout<<e.what()<<endl;
      status = 1;
   }
   
F. implict conversions 
class Rational {
public : 
  operator double() const ; // better way is to define "double asDouble() const"
  Rational( double d ) ; //   better way is to " explicit Rational( double d ) " 
}

original of temporary objects
1 . pass by value
2 . reference to const
3 . return a const obj from function

G. cast pointer 
dynamic_cast 是对有多态层次进行操作,(有虚函数) 因为他存储了VTABLE中信息判断实际类型。
typeid(s) == typeid(sp)   static_cast 结合使用。 static_cast 可以进行向上向下转换。 向上转换总是通用的可行的二suoyi
可以不写。向下类型转换用static_cast快于dynamtic_cast 
如果没有虚函数，只能用static_cast ,注意static_cast 只能用在该类的层次中转换，或者在进行narrowing conversion 如long ->int,
double -> float


1. cp = static_cast<type*> (s)
if (cp) 
   cout<<"it's a square"<<endl;
const_cast cast away const or volatile 
2. const int * const p ;  [第一个const只是底层const ,表明p指向的地址是const.第二个const 表明p指针对象本身是const，指针是对象，引用是别名] [第二个const，即指针对象本身的属性会限制\影响其在作为左值时的用法] const_cast 只是cast away 对象底层的 const性质 

H .   std::cout << std::boolalpha
              << "NL boolalpha true  : " << true << "\n"
              << "NL boolalpha false : " << false << "\n"
              << std::noboolalpha;

I . function template 

    void flat1(double d, function<int(double)> func ){
       int val = func(d) ; 
       return ; 
    }
    
    template<typename T>
    void t_flat(T t,function<void(T)> func) {
       func(t) ; 
       return ;
    }
    
    
     void main() {
       double d = 0.5 ; 
       auto flatLambda = [](double d)->int {
           return std::floor(d) ; 
       };
       flat1(d,flatLambda) ; 
       
       // method 2
       t_flat<double>(0.4,flatLambda) ;
       return ; 
     }
    
    
